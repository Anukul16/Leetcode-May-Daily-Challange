Approach 1:

TC -> O(N) SC ->O(1) 
-------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
       ListNode slow=head,fast=head;
       // Finding the middle of linked list
       while(fast!=null && fast.next!=null){
           slow=slow.next;
           fast=fast.next.next;
       }
       // here i am just doing reverse operation from the middle to the end of ll
       ListNode next_of_slow=null,prev=null;
       while(slow!=null){
           next_of_slow=slow.next;
           slow.next=prev;
           prev=slow;
           slow=next_of_slow;
       }
       // Now just finding the ans which is maximum
       int ans=0;
       while(prev!=null){
           ans=Math.max(ans,head.val+prev.val);
           prev=prev.next;
           head=head.next;
       }
       return ans;
        
    }
}




Approach 2:

TC -> O(N)  SC -> O(N)
----------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ArrayList<Integer>list=new ArrayList<>();
        ListNode curr=head;
        while(curr!=null){
            list.add(curr.val);
            curr=curr.next;
        }
        int ans=0;
        for(int i=0;i<=list.size()/2;i++){
            int sum=list.get(i)+list.get(list.size()-i-1);
            ans=Math.max(ans,sum);
        }
        return ans;
    }
}
