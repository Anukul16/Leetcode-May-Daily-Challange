class Solution {
    int[][] dp;
    
    // Recursive helper function to calculate the minimum cost
    // of cutting sticks between left and right indices.
    int solve(int start_stick, int end_stick, int[] cuts, int left, int right) {
        if (left > right) return 0; // Base case: no cuts between left and right.
        
        if (dp[left][right] != -1) return dp[left][right]; // If already computed, return the cached result.

        int cost = Integer.MAX_VALUE;

        // Try all possible cuts between left and right indices.
        for (int i = left; i <= right; i++) {
            int left_cost = solve(start_stick, cuts[i], cuts, left, i - 1); // Cost of left part.
            int right_cost = solve(cuts[i], end_stick, cuts, i + 1, right); // Cost of right part.
            int curr_cost = (end_stick - start_stick) + left_cost + right_cost; // Calculate the cost of the current cut.
            cost = Math.min(cost, curr_cost); // Update the minimum cost.
        }

        return dp[left][right] = cost; // Cache the result and return the minimum cost.
    }
    
    // Main function to calculate the minimum cost of cutting sticks of length n.
    int minCost(int n, int[] cuts) {
        dp = new int[cuts.length][cuts.length]; // Create a DP array to cache computed results.
        for (int[] row : dp) {
            Arrays.fill(row, -1); // Initialize the DP array with -1 to indicate uncomputed values.
        }
        
        Arrays.sort(cuts); // Sort the cuts array in ascending order.
        return solve(0, n, cuts, 0, cuts.length - 1); // Call the recursive helper function to calculate the minimum cost.
    }
}
