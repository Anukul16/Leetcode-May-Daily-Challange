Approach 1 using BFS:
-------------------
class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int[]color=new int[n];
        Arrays.fill(color,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(bfs(i,color,graph)==false){
                    return false;
                }
            }
        }
       return true;
    }
    boolean bfs(int st,int[]color,int[][]graph){
        Queue<Integer>q=new LinkedList<>();
        color[st]=0;
        q.add(st);
        while(q.size()>0){
            int node=q.poll();
            for(Integer it:graph[node]){
                if(color[it]==-1){
                    color[it]=1-color[node];
                    q.add(it);
                }else if(color[it]==color[node]){
                    return false;
                }
            }
        }
        return true;
    }
}






Approach 2 using BFS but less code:
----------------------------------
class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int color[]=new int[n];
        Arrays.fill(color,-1);
        for(int i=0;i<n;i++){
            if(color[i]!=-1){
                continue;
            }
            Queue<Integer>q=new LinkedList<>();
            color[i]=0;
            q.add(i);
            while(q.size()>0){
                int node=q.poll();
                for(Integer it:graph[node]){
                    if(color[it]==-1){
                        color[it]=1-color[node];
                        q.add(it);
                    }else if(color[it]==color[node]){
                        return false;
                    }
                }
            }
        }
        return true;
    }
}








Approach 3 using DFS:
--------------------
class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int color[]=new int[n];
        for(int i=0;i<n;i++)color[i]=-1;
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(dfs(i,0,color,graph)==false){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean dfs(int node,int clr,int[]color,int[][]graph){
        color[node]=clr;
        for(int it:graph[node]){
            if(color[it]==-1){
                if(dfs(it,1-clr,color,graph)==false){
                    return false;
                }
            }else if(color[it]==color[node]){
                return false;
            }
        }
        return true;
    }
}
