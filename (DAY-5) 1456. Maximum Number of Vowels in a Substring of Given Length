class Solution {
    public int maxVowels(String s, int k) {
        int n=s.length();
        int count=0,ans=0;
        int i=0,j=0;
        while(j<n){
            if(isVowel(s.charAt(j))){
                count++;
            }
            if(j-i+1<k)j++;
            else if(j-i+1==k){
                ans=Math.max(ans,count);
                if(isVowel(s.charAt(i)))count--;
                i++;
                j++;
            }
        }
        return ans;
    }
    boolean isVowel(char ch){
        return ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u';
    }
}
/*
 Revise -->1


    The given code implements a sliding window approach to find the maximum number of vowels in a substring of length k in the given string s.

    The main idea is to use two pointers, i and j, to represent the left and right endpoints of the sliding window, respectively. The variable count is used to keep track of the number of vowels in the current window. The variable ans is used to store the maximum number of vowels seen so far in any window of size k.

    The loop starts with both pointers i and j at the beginning of the string. The code then checks if the current character at j is a vowel or not. If it is a vowel, the count is incremented.

    Next, the code checks if the size of the current window is less than k. If it is, then we move the j pointer to the right and continue.

    When the window size becomes equal to k, we check if the current count of vowels is greater than the ans seen so far. If it is, then we update ans. We also check if the left endpoint of the window, s.charAt(i), is a vowel or not. If it is a vowel, then we decrement the count by 1.
        
            For e.g-->[abciii] if k=3
                here for first window (a,b,c) count will be 1
                so when we increment the i pointer to the right make sure that if  at i th position is vowel then decrement it cause we will go for next window (b,c,i) if we do not decrement it then in this window the count will become 2 (previous i and present window total vowel)1 that is wrong


We then move both the pointers i and j one step to the right and continue the loop until we have processed all the substrings of length k in the string.

Finally, we return the maxNo as the maximum number of vowels seen in any substring of length k in the given string s.




*/
