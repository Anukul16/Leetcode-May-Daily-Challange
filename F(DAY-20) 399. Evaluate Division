

class Solution {

    public void dfs(Map<String, List<Pair<String, Double>>> adj, String src, String dst, Set<String> visited, double product, double[] ans) {
        if (visited.contains(src))
            return;

        visited.add(src);
        if (src.equals(dst)) {
            ans[0] = product;
            return;
        }

        for (Pair<String, Double> p : adj.getOrDefault(src, new ArrayList<>())) {
            String v = p.getKey();
            double val = p.getValue();

            dfs(adj, v, dst, visited, product * val, ans);
        }
    }

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int n = equations.size();

        Map<String, List<Pair<String, Double>>> adj = new HashMap<>();

        for (int i = 0; i < n; i++) {
            String u = equations.get(i).get(0);
            String v = equations.get(i).get(1);
            double val = values[i];

            adj.putIfAbsent(u, new ArrayList<>());
            adj.putIfAbsent(v, new ArrayList<>());

            adj.get(u).add(new Pair<>(v, val)); // To handle a/c
            adj.get(v).add(new Pair<>(u, 1.0 / val)); // To handle c/a
        }

        double[] result = new double[queries.size()];

        for (int i = 0; i < queries.size(); i++) {
            String src = queries.get(i).get(0);
            String dst = queries.get(i).get(1);

            double[] ans = { -1.0 };
            double product = 1.0;

            if (adj.containsKey(src)) {
                Set<String> visited = new HashSet<>();

                dfs(adj, src, dst, visited, product, ans);
            }

            result[i] = ans[0];
        }

        return result;
    }
}
